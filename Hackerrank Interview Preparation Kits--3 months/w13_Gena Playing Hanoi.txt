# https://www.hackerrank.com/challenges/three-month-preparation-kit-gena/problem?isFullScreen=true&h_l=interview&playlist_slugs%5B%5D=preparation-kits&playlist_slugs%5B%5D=three-month-preparation-kit&playlist_slugs%5B%5D=three-month-week-thirteen
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'hanoi' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER_ARRAY posts as parameter.
#

import copy
def hanoi(posts):
    # Write your code here
    # each step have the equal cost(1), use BFS
    # maximum # of state=4^10=1 048 576
    init=tuple(posts)
    goal=[1 for i in range(len(posts))]
    goal_tup=tuple(goal)
    if init==goal_tup: # special case, checked before queue
        return 0
    
    # BFS, use list to implement a queue
    que=[(posts,1,0),(goal,2,0)] # (state,type,length) # 0 mean the length of the path
    fnt=0 # front included
    vist={init:(1,0),goal_tup:(2,0)} # (type,length) # already visted
    while fnt<len(que):
        # pop
        (state,t,l)=que[fnt]
        fnt +=1
        if fnt >= 100000:
            que=que[fnt:]
            fnt=0
        # expand--move the top disc for each rod
        top=[100] # -1 means no disc...actually means can handle any disc, thus, max
        for i in range(1,5): # 1--4
            if i in state:
                top.append(state.index(i))
            else:
                top.append(100)
        # try to move
        for s in range(1,5): # from, start
            for e in range(1,5): # to, end
                if s != e and top[s]<top[e]: # not itself, start smaller than end
                    newstate=copy.copy(state)
                    newstate[top[s]]=e
                    newtuple=tuple(newstate)
                    if newtuple not in vist:
                        que.append((newstate,t,l+1))
                        vist[newtuple]=(t,l+1)
                    elif vist[newtuple][0] != t:
                        print(newtuple,l+1,vist[newtuple][1])
                        return l+1+vist[newtuple][1]

    return -1
    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    loc = list(map(int, input().rstrip().split()))

    res = hanoi(loc)

    fptr.write(str(res) + '\n')

    fptr.close()
